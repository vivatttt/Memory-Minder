from aiogram import Router
from aiogram import types
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
import asyncio

from frontend.bot.games.names_memory.keyboards import Keyboard, Continue, OptionsPlay, OptionsButtons, Agree
from frontend.bot.games.names_memory.utils import with_game_slug
from frontend.bot.games.names_memory import NamesMemoryGame
from frontend.bot.games.names_memory.keyboards import Keyboard
from frontend.bot.games.names_memory.middleware import Middleware
from frontend.bot.games.names_memory.states import NamesMemoryForm
from backend.app.services.games.names_memory.get_data import get_images, change_images
from backend.app.services.games.names_memory.const import images_in_round, asking_in_round
from backend.app.services.games.names_memory.stats_scores import rounds, get_results_round
from backend.app.services.games.names_memory.charts import scores_answers, date_game, scores
from frontend.bot.base.texts import markdown
from frontend.bot.base.clean_folder import clear_media_folder
from frontend.bot.main_menu.keyboards import game_started_prefix

router = Router()
router.message.middleware(Middleware())
kb = Keyboard()



@router.callback_query(lambda callback: callback.data == NamesMemoryGame.add_prefix(game_started_prefix))
async def game_started(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    result = await rounds(session, callback.from_user.id)

    if result != 0:
        welcome_text = (
            f"–ú—ã —Å–Ω–æ–≤–∞ —É–≤–∏–¥–∏–ª–∏—Å—å –≤ –∏–≥—Ä–µ *{NamesMemoryGame.name}*\\!\n\n‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è‚öúÔ∏è"
            f"\n\n_–ü–æ—Å–º–æ—Ç—Ä–∏–º\\, —á—Ç–æ —É –Ω–∞—Å —Ç—É—Ç –µ—Å—Ç—å –¥–ª—è –≤–∞—Å_"
        )
        reply_markup = kb.options_buttons()
    else:
        welcome_text = (
            f"‚ûø‚ûøüî∫‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø\n\n‚ÄºÔ∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –∏–≥—Ä–µ‚ÄºÔ∏è\n      *{NamesMemoryGame.name}*\\!"
            f"\n\n‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûøüîª‚ûø\n\nüîπ–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –Ω–µ–µüîπ\\, "
            f"–Ω–æ –º—ã —É–≤–µ—Ä–µ–Ω—ã\\, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è\\!\n\n"
            f"–ü—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã\\.\n–°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –∏—Ö "
            f"–Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 3 —Å–µ–∫—É–Ω–¥—ã\\.\n"
            f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\\."
            f" –ó–∞—Ç–µ–º –≤–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏\\, –∏ –≤—ã –¥–æ–ª–∂–Ω—ã –≤—Å–ø–æ–º–Ω–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è\\."
            f" –û–¥–Ω–∞–∫–æ  –≤–∞–º –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∏\\, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ —Ä–∞—É–Ω–¥–µ\\, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ"
            f" –ù–ï –ë–´–õ–û\\.‚òëÔ∏è\n\n‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø\n\n"
            f"–î—É–º–∞—é\\, –≤—ã —Å–æ –≤—Å–µ–º —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å\\!ü•≥\nüî∏–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—åüî∏\\!"
        )
        reply_markup = kb.options_buttons_first()

    await callback.message.answer(
        welcome_text,
        parse_mode="MarkdownV2",
        reply_markup=reply_markup
    )
    await state.clear()


@router.callback_query(lambda callback: callback.data == with_game_slug(Continue.conti.name))
async def continue_game(callback: CallbackQuery):

    clear_media_folder('backend/app/db/data/media')

    await callback.message.edit_text(
        f"_–ê —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ\\?üßê_",
        parse_mode="MarkdownV2",
        reply_markup=kb.options_buttons()
    )

@router.callback_query(lambda callback: callback.data == with_game_slug(OptionsButtons.stats.name))
async def stats_game(callback: CallbackQuery, session: AsyncSession):

    chart_buf = await scores_answers(session, user_id=callback.from_user.id)

    photo = FSInputFile(chart_buf)
    await callback.message.answer_photo(photo=photo, caption="–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤")


    chart_buf = await date_game(session, user_id=callback.from_user.id)
    photo = FSInputFile(chart_buf)
    await callback.message.answer_photo(photo=photo, caption="–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç –∏–≥—Ä")

    statist = await scores(session, user_id=callback.from_user.id)

    await callback.message.answer(
        f"    _üìà–°–¢–ê–¢–ò–°–¢–ò–ö–êüìâ_",
        parse_mode="HTML",
        reply_markup=kb.statistic(statist)
    )

@router.callback_query(lambda callback: callback.data == with_game_slug(OptionsButtons.rules.name))
async def rules_game(callback: CallbackQuery):

    await callback.answer(
        f"–í—ã–≤–æ–¥—è—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã.\n\n–ó–∞—Ç–µ–º –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∞—Ç "
        f"–∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è.\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, —Ç–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç - –ù–ï –ë–´–õ–û.\n‚úÖ‚úÖ‚úÖ",
        show_alert=True
    )

    rules_text = "_–ê —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ\\?üå∫_"

    await callback.message.edit_text(
        rules_text,
        parse_mode="MarkdownV2",
        reply_markup=kb.options_buttons(),
    )

@router.callback_query(lambda callback: callback.data == with_game_slug(OptionsPlay.play.name))
async def playing(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    message_ids = []

    images, mistakes = await get_images(session=session, user_id=callback.from_user.id)
    await state.update_data(images=images)

    if mistakes:
        text = f"_–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å\\!ü§´\n\n–ù–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ —É—Å–ª–æ–∂–Ω—è—é—Ç—Å—è\\!ü§Ø_"
    else:
        text = f"_–£ –≤–∞—Å –±—ã–ª–æ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫\\!ü§´\n\n–î–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º –∏—Ö\\!ü§Ø_"

    await callback.message.edit_text(
        text=text,
        parse_mode="MarkdownV2",
        reply_markup=None,
    )
    await asyncio.sleep(2)

    for i in range(images_in_round() - 2):
        id, photo_url, image_title = images[i]

        message = await callback.message.edit_text(
            f"_–ö–∞—Ä—Ç–∏–Ω–∫–∞_ {i + 1}\n",
            parse_mode="MarkdownV2",
            reply_markup=None,
        )
        message_ids.append(message.message_id)

        try:
            message = await callback.message.answer_photo(
                photo=photo_url,
                caption=f"{image_title}\n",
            )
            message_ids.append(message.message_id)
            await asyncio.sleep(5)
            await callback.message.chat.delete_message(message.message_id)
        except:
            await callback.message.edit_text(
                f"_–ò–∑–≤–∏–Ω–∏—Ç–µ\\, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è_üò≠\n",
                parse_mode="MarkdownV2",
                reply_markup=None,
            )
            await asyncio.sleep(3)

    message = await callback.message.edit_text(
        f"–ù—É —á—Ç–æ\\, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º\\?",
        parse_mode="MarkdownV2",
        reply_markup=kb.agree_button()
    )
    message_ids.append(message.message_id)

    for message_id in message_ids:
        try:
            await callback.message.delete_message(message_id)
        except Exception as e:
            pass

@router.callback_query(lambda callback: callback.data == with_game_slug(Agree.agree.name))
async def agree_game(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    await state.set_state(NamesMemoryForm.waiting_for_answer.state)
    await state.update_data(question_index=0, answers=[])

    data = await state.get_data()
    images = data.get('images', [])

    images = await change_images(images)

    await state.update_data(images=images, id=callback.from_user.id, session=session)
    id, photo_url, image_title = images[0]

    await callback.message.edit_text(
        f"_–ö–∞—Ä—Ç–∏–Ω–∫–∞_ {1}",
        parse_mode="MarkdownV2",
        reply_markup=None,
    )

    try:
        await callback.message.answer_photo(
            photo=photo_url,
        )
    except:
        await callback.message.edit_text(
            f"_–ò–∑–≤–∏–Ω–∏—Ç–µ\\, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è_üò≠\n",
            parse_mode="MarkdownV2",
            reply_markup=None,
        )

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

@router.message(NamesMemoryForm.waiting_for_answer)
async def handle_user_answer(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    answers = data.get('answers', [])
    question_index = data.get('question_index', 0)
    images = data.get('images')
    id = data.get('id')

    answers.append(message.text)
    question_index += 1

    if question_index < asking_in_round():
        await state.update_data(answers=answers, question_index=question_index)
        await message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {message.text}\n")

        id, photo_url, image_title = images[question_index]

        await message.answer(
            f"_–ö–∞—Ä—Ç–∏–Ω–∫–∞_ {question_index + 1}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç\\:",
            parse_mode="MarkdownV2")
        try:
            message = await message.answer_photo(
                photo=photo_url,
            )
        except:
            await message.edit_text(
                f"_–ò–∑–≤–∏–Ω–∏—Ç–µ\\, –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è_üò≠\n",
                parse_mode="MarkdownV2",
                reply_markup=None,
            )
    else:
        results, arr = await get_results_round(session, id, images, answers)
        await message.answer(
            f"–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω\\!üî•\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ {results} –∏–∑ {asking_in_round()}\\.\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã \\:\n{markdown(arr)}",
            parse_mode="MarkdownV2",
            reply_markup=kb.continue_button()
        )
        await state.clear()