import asyncio
from asyncio import Event
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
import json
import os

from frontend.bot.main_menu.keyboards import game_started_prefix
from frontend.bot.games.n_back.utils import with_game_slug
from frontend.bot.games.n_back.keyboards import Keyboard, GameEndButtons, GameMenuButtons, NumbersButtons
from frontend.bot.games.n_back import NBackGame
from frontend.bot.games.n_back.states import NBackForm, ChangeNState
from frontend.bot.games.n_back.middleware import Middleware
from backend.app.services.games.n_back.charts import scores_n_back, add_scores_n_back, date_n_back, answers_n_back

def output_results(user):
    res = "–û—Ç–≤–µ—Ç—ã:  –í–∞—à  –í–µ—Ä–Ω—ã–π"
    for choice, right in zip(user.choice_values, user.right_values):
        if choice == right:
            res += "\n    ‚úÖ{:>12} {:>11}".format(choice, right)
        else:
            res += "\n    ‚ùå{:>12} {:>11}".format(choice, right)
    return res

def generate_examples(user, n=1):
    import random
    examples = []
    for i in range(n):
        sign = random.choice(["+", "-"])
        a = random.randint(0, 9)
        b = random.randint(0, 9)
        if n != 1:
            examples.append(f"{i+1}) {a} {sign} {b}")
        else:
            examples.append(f"{a} {sign} {b}")
        if sign == "+": 
            user.right_values.append(str(a+b)[-1]) 
        else:
            user.right_values.append(str(a-b)[-1]) 
    return "\n".join(examples)


class UserSession:
    def __init__(self):
        self.choice_event = asyncio.Event()
        self.choice_values = []
        self.right_values = []

user_sessions = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

router = Router()
router.message.middleware(Middleware())
kb = Keyboard()
    
@router.callback_query(lambda callback : callback.data == NBackGame.add_prefix(game_started_prefix))
async def game_started(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    user_data = load_user_data()
    first_user = False
    if user_id not in user_data:
        user_data[user_id] = {"n": 1}
        first_user = True
    n = user_data[user_id].get("n", 1)
    save_user_data(user_data)

    if first_user:
        await callback.message.answer(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ –ª—é–±–∏—Ç–µ–ª—è –ø—Ä–æ–∫–∞—á–∞—Ç—å –ø–∞–º—è—Ç—åüßê –í—ã –ø–æ–ø–∞–ª–∏ –≤ –∏–≥—Ä—É *{NBackGame.name}*\\." +
            f"\n–í–∞—à–µ *N \\= {n}*\\. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ\\, —Ç–æ —Å–æ–≤–µ—Ç—É—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü—Ä–∞–≤–∏–ª–∞*\\." +
            f"\n_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ_",
            parse_mode="MarkdownV2",
            reply_markup=kb.game_menu(),
        )
    else:
        await callback.message.answer(
            f"–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∏–≥—Ä—É *{NBackGame.name}*\\. –í–∞—à–µ *N \\= {n}*\n_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ_",
            parse_mode="MarkdownV2",
            reply_markup=kb.game_menu(),
        )
    await state.clear()

@router.callback_query(lambda callback : callback.data == with_game_slug(GameEndButtons.retry.name))
async def retry_game(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    user_data = load_user_data()
    n = user_data[user_id].get("n", 1)
    await callback.message.edit_text(
        f"–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∏–≥—Ä—É *{NBackGame.name}*\\. –í–∞—à–µ *N \\= {n}*\n_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ_",
        parse_mode="MarkdownV2",
        reply_markup=kb.game_menu(),
    )

@router.callback_query(lambda callback : callback.data == with_game_slug(GameEndButtons.results.name))
async def results_game(callback: CallbackQuery):
    await callback.message.edit_text(
        output_results(user_sessions[callback.from_user.id]),
        parse_mode="MarkdownV2",
        reply_markup=kb.game_menu(),
    )

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É
DATA_FILE = "user_data.json"
project_root = os.path.dirname(os.path.abspath(__file__))
path_to_file = os.path.join(project_root, DATA_FILE)

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if not os.path.exists(path_to_file):
        return {}
    with open(path_to_file, "r", encoding="utf-8") as file:
        return json.load(file)

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª–µ."""
    with open(path_to_file, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

@router.callback_query(lambda callback: callback.data == with_game_slug(GameMenuButtons.N.name))
async def change_n(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 100):")
    await state.set_state(ChangeNState.waiting_for_n)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@router.message(ChangeNState.waiting_for_n)
async def input_n(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = load_user_data()

    try:
        new_n = int(message.text)
        if not 1 <= new_n <= 100:
            raise ValueError

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ n
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]["n"] = new_n
        save_user_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        await message.answer(
            f"–í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ N –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_n}.",
            reply_markup=kb.game_menu()
            )
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")


@router.callback_query(lambda callback : callback.data == with_game_slug(GameMenuButtons.rules.name))
async def game_rule(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    user_data = load_user_data()
    n = user_data[user_id].get("n", 1)

    await callback.message.edit_text(
        f"–í –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ—à–∏—Ç—å N –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞ 3\\*N —Å–µ–∫—É–Ω–¥ *\\(—Ç–µ–∫—É—â–µ–µ N \\= {n}\\)* " +
        f"–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ\\. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø—Ä–∏–º–µ—Ä–æ–º –∏ 10 —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞\\."+
        f" –í–∞–º –Ω–∞–¥–æ –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä\\, –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ *—Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π* —Ä–µ—à–µ–Ω–Ω—ã–π" +
        f" –ø—Ä–∏–º–µ—Ä –≤ —ç—Ç–æ–π –∏–≥—Ä–µ\\. –î–∞–ª–µ–µ —Å–∏—Ç—É–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–∞—Ç—å —É–∂–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ä–µ—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ –ø—Ä–∏–º–µ—Ä –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã\\." +
        f" –í—Å–µ–≥–æ N\\+10 –≤–æ–ø—Ä–æ—Å–æ–≤\\." +
        f"\n\n–ï—Å–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö —á—Ç–æ\\-—Ç–æ –Ω–µ—è—Å–Ω–æ\\, —Ç–æ —Å–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É\\, —Ç–∞–∫ —Å—Ç–∞–Ω–µ—Ç —Å—Ä–∞–∑—É –ø–æ–Ω—è—Ç–Ω–µ–µ\\!",
        parse_mode="MarkdownV2",
        reply_markup=kb.game_menu_after_rule(),
    )

@router.callback_query(lambda callback: callback.data.startswith("choice_"))
async def handle_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    session = user_sessions[user_id]
    session.choice_values.append(callback.data.split("_")[1])
    session.choice_event.set()
    session.choice_event.clear()
    # await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {session.choice_values[-1]}")

@router.callback_query(lambda callback: callback.data == with_game_slug(GameMenuButtons.play.name))
async def game_start(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    user_data = load_user_data()
    n = user_data[str(user_id)].get("n", 1)
    k = 10
    user_sessions[user_id] = UserSession()
    sessions = user_sessions[user_id]

    await callback.message.edit_text(f"–ó–∞–ø–æ–º–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö —ç—Ç–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤\n{generate_examples(sessions, n)}")
    await asyncio.sleep(3 * n + 2)

    for i in range(k):
        msg = await callback.message.edit_text(
            f"–ü—Ä–∏–º–µ—Ä: {generate_examples(sessions)}" +
            f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ {i+1} –ø—Ä–∏–º–µ—Ä",
            reply_markup=NumbersButtons.key
        )
        
        await sessions.choice_event.wait()
    
    for i in range(n):
        msg = await callback.message.edit_text(
            f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ {i+k+1} –ø—Ä–∏–º–µ—Ä",
            reply_markup=NumbersButtons.key
        )
        
        await sessions.choice_event.wait()

    
    if sessions.choice_values == sessions.right_values:
        await add_scores_n_back(
            session=session,
            user_id=callback.from_user.id,
            correct_answers=len(sessions.right_values),
            wrong_answers=0,
            percentage=100,
            n_level=n
        )

        await callback.message.edit_text(
            f"–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Çüéâüéâüéâ \n100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
            reply_markup=kb.end_game_menu()
        )
    else:
        count_right_answer = sum(1 for choice, right in zip(sessions.choice_values, sessions.right_values) if choice == right)

        await add_scores_n_back(
            session=session,
            user_id=callback.from_user.id,
            correct_answers=count_right_answer,
            wrong_answers=len(sessions.right_values) - count_right_answer,
            percentage=int(count_right_answer/len(sessions.choice_values)*100+0.5),
            n_level=n
        )


        await callback.message.edit_text(
            f"–ù–µ–∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!" +
            f"\n{int(count_right_answer/len(sessions.choice_values)*100+0.5)}% –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—åü§ó",
            reply_markup=kb.end_game_menu()
        )

@router.callback_query(lambda callback: callback.data == with_game_slug(GameMenuButtons.stats.name))
async def stats_game(callback: CallbackQuery, session: AsyncSession):

    chart_buf = await scores_n_back(session=session, user_id=callback.from_user.id)
    photo = FSInputFile(chart_buf)
    await callback.message.answer_photo(photo=photo, caption="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—Ö–∞")


    chart_buf = await date_n_back(session=session, user_id=callback.from_user.id)
    photo = FSInputFile(chart_buf)
    await callback.message.answer_photo(photo=photo, caption="–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç")

    chart_buf = await answers_n_back(session=session, user_id=callback.from_user.id)
    photo = FSInputFile(chart_buf)
    await callback.message.answer_photo(photo=photo, caption="–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤")


    await callback.message.answer(
        f"_–°–¢–ê–¢–ò–°–¢–ò–ö–ê_",
        reply_markup=kb.game_menu_after_rule()
    )