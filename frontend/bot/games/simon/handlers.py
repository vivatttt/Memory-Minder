from aiogram import F, Router
from aiogram.filters import Command
from aiogram.methods import answer_callback_query
from aiogram.types import FSInputFile, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession

from frontend.bot.games.simon import SimonGame
from frontend.bot.games.simon.states import SimonForm
from frontend.bot.games.simon.keyboards import Keyboard
from frontend.bot.main_menu.keyboards import Keyboard as MainMenuKeyboard
from frontend.bot.games.simon.middleware import Middleware
from frontend.bot.main_menu.states import MainMenuForm
from frontend.bot.main_menu.keyboards import game_started_prefix
from backend.app.services.games.simon.charts import add_scores_simon, scores_length, date_simon

from random import choice
import asyncio

router = Router()
router.message.middleware(Middleware())
kb = Keyboard()
main_menu_kb = MainMenuKeyboard()

@router.callback_query(lambda callback: callback.data == SimonGame.add_prefix(game_started_prefix))
async def game_started(callback: CallbackQuery, state: FSMContext):
    keyboard = [
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
        [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã")],
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")]
    ]
    start_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É *{SimonGame.name}*\\.\n" \
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –º–µ–Ω—é\\."
    await callback.message.answer(
        text=start_text,
        parse_mode="MarkdownV2",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(SimonForm.get_command)


@router.message(SimonForm.get_command)
async def get_command(message: Message, state: FSMContext, session: AsyncSession):
    if message.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
        await message.answer(text="–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.\n\n–ó–∞–ø–æ–º–∏–Ω–∞–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤.")
        await asyncio.sleep(1)
        await state.set_state(SimonForm.simon_game)
        await start_game(message, state)
    elif message.text == "–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã":
        description_text = f"*–°–∞–π–º–æ–Ω* \\- —ç—Ç–æ –∏–≥—Ä–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–∞–º—è—Ç–∏\\." \
                           f"\n\n*–ó–∞–¥–∞—á–∞ –∏–≥—Ä—ã:* –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–≥—Ä–æ–∫—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤\\. " \
                           f"–ö–∞–∂–¥—ã–π —Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, —Ü–≤–µ—Ç –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å " \
                           f"–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å\\." \
                           f"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø–µ—Ä–≤–æ–º —Ö–æ–¥—É –ø–æ—è–≤–∏–ª—Å—è *–ö—Ä–∞—Å–Ω—ã–π*, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å *–ö—Ä–∞—Å–Ω—ã–π*\\. " \
                           f"–ù–∞ –≤—Ç–æ—Ä–æ–º —Ö–æ–¥—É –ø–æ—è–≤–∏–ª—Å—è *–°–∏–Ω–∏–π*, —Ç–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–∞—Ç—å: " \
                           f"*–ö—Ä–∞—Å–Ω—ã–π* \\- *–°–∏–Ω–∏–π* –ò —Ç–∞–∫ –¥–∞–ª–µ–µ, –ø–æ–∫–∞ –Ω–µ –æ—à–∏–±—ë—à—å—Å—è\\!" \
                           f"\n\n–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã\\? –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º\\!"
        keyboard = [
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
            [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")]
        ]
        await message.answer(
            text=description_text,
            parse_mode="MarkdownV2",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    elif message.text == "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã":
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MemoryMinder*\n_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ_",
            parse_mode="MarkdownV2",
            reply_markup=main_menu_kb.main_menu()
        )
        await state.set_state(MainMenuForm.started)
    elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":

        chart_buf = await scores_length(session=session, user_id=message.from_user.id)
        photo = FSInputFile(chart_buf)
        await message.answer_photo(photo=photo, caption="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—Ö–∞")

        chart_buf = await date_simon(session=session, user_id=message.from_user.id)
        photo = FSInputFile(chart_buf)
        await message.answer_photo(photo=photo, caption="–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç")

        keyboard = [
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
            [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")]
        ]

        await message.answer(
            "_–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_",
            parse_mode="MarkdownV2",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    elif message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É":
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


@router.message(SimonForm.simon_game, F.text)
async def prevent_text_input(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∞ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.")


@router.message(SimonForm.simon_game)
async def start_game(message, state: FSMContext):
    colours = ["üü•", "üü¶", "üü©", "üü®"]
    keyboard = [
        [InlineKeyboardButton(text="–ö—Ä–∞—Å–Ω—ã–π", callback_data="colour_red")],
        [InlineKeyboardButton(text="–°–∏–Ω–∏–π", callback_data="colour_blue")],
        [InlineKeyboardButton(text="–ó–µ–ª—ë–Ω—ã–π", callback_data="colour_green")],
        [InlineKeyboardButton(text="–ñ—ë–ª—Ç—ã–π", callback_data="colour_yellow")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    data = await state.get_data()
    answer = data.get("answer", [])
    colour = choice(colours)
    answer.append(colour)
    await state.update_data({"result": []})

    sent_message = await message.answer(" ".join(answer))
    await state.update_data({"colour": colour, "answer": answer})
    await asyncio.sleep(1)
    await sent_message.edit_text("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                                 reply_markup=reply_markup, one_time_keyboard=True)


def translate_colour(english):
    if english == "red":
        return "üü•"
    elif english == "blue":
        return "üü¶"
    elif english == "green":
        return "üü©"
    elif english == "yellow":
        return "üü®"
    else:
        return ""


@router.callback_query(lambda call: call.data.startswith('colour_'))
async def handle_colour_choice(call, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    colour = data.get('colour', "")
    answer = data.get('answer', [])
    selected_colour = translate_colour(call.data.split('_')[1])
    result = data.get('result', [])
    result.append(selected_colour)
    await state.update_data({"result": result})

    mistake = False
    if len(answer) == len(result):
        for i in range(len(answer)):
            if answer[i] != result[i]:
                mistake = True
                break
        if not mistake:
            await call.answer(f"–í–µ—Ä–Ω–æ!")
            await call.message.delete()
            await start_game(call.message, state=state)
        else:
            await call.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä: {", ".join(result)}.\n–ù—É–∂–Ω–æ –±—ã–ª–æ: {", ".join(answer)}.")
            await asyncio.sleep(1)
            await call.message.delete()
            await state.clear()
            await state.set_state(SimonForm.get_command)
            keyboard = [
                [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
                [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã")],
                [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")]
            ]

            await add_scores_simon(session=session, user_id=call.from_user.id, all_length=len(answer))

            await call.message.answer(
                text=f"–ù–µ —É–Ω—ã–≤–∞–π\\! –¢—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è {len(answer)} —Ä–∞–∑\\(–∞\\)\\.\n\n–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑\\?",
                parse_mode="MarkdownV2",
                reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            await get_command(message=call.message.edit_text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É"), state=state, session=session)
    else:
        await call.answer()